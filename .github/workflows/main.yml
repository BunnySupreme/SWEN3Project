name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  ASPNETCORE_ENVIRONMENT: Production
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create password files
      run: |
        # echo "${{ secrets.POSTGRES_PASSWORD }}" > postgres_password.txt
        # echo "${{ secrets.RABBIT_PASSWORD }}" > rabbit_password.txt
        # echo "${{ secrets.MINIO_PASSWORD }}" > minio_password.txt
      working-directory: .

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Verify Docker and Docker Compose
      run: |
        docker --version
        docker compose version
        docker ps

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./paperless

    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      working-directory: ./paperless

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal
      working-directory: ./paperless

    - name: Build Docker images
      run: docker compose -f "docker-compose.yml" build
      working-directory: .

    - name: Test Docker Compose configuration
      run: docker compose -f "docker-compose.yml" config
      working-directory: .

    - name: Run integration tests
      run: |
        # Start services for integration testing
        docker compose -f "docker-compose.yml" up -d
        # Wait for services to be ready
        sleep 30
        # Integration tests once present
        # dotnet test --filter "Category=Integration"
        # Cleanup
        docker compose -f "docker-compose.yml" down
      working-directory: .

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: docker compose -f "docker-compose.yml" up -d
      working-directory: .

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy]
    if: always()
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build-and-test.result }}" = "success" ]; then
          echo "✅ Build and tests passed"
        else
          echo "❌ Build or tests failed"
        fi
    
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "✅ Deployment completed"
        elif [ "${{ needs.deploy.result }}" = "skipped" ]; then
          echo "⏭️ Deployment skipped (not main branch)"
        else
          echo "❌ Deployment failed"
        fi
