name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'                # logs show net9.0 builds/tests
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  ASPNETCORE_ENVIRONMENT: Production
  
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Verify Docker and Docker Compose
      run: |
        docker --version
        docker compose version
        docker ps

    - name: Restore dependencies
      run: dotnet restore paperless/paperless.sln

    - name: Build solution
      run: dotnet build paperless/paperless.sln --configuration Release --no-restore

    # üîí Run ONLY the test project to avoid picking up app projects as test containers
    - name: Run unit tests
      run: >
        dotnet test
        paperless/tests/Paperless.UnitTests/Paperless.UnitTests.csproj
        --configuration Release
        --no-build
        --verbosity normal

    # ---- Docker bits (optional for CI, kept as you had them) ----
    - name: Create password files
      run: |
        mkdir -p secrets
        echo "${{ secrets.POSTGRES_PASSWORD }}" > secrets/postgres_password.txt
        echo "${{ secrets.RABBIT_PASSWORD }}" > secrets/rabbit_password.txt
        echo "${{ secrets.MINIO_PASSWORD }}" > secrets/minio_password.txt

    - name: Build Docker images
      run: docker compose -f "docker-compose.yml" build

    - name: Test Docker Compose configuration
      run: docker compose -f "docker-compose.yml" config

    - name: Run integration tests
      run: |
        docker compose -f "docker-compose.yml" up -d
        sleep 30
        # dotnet ef database update --project ./paperless/paperless.csproj
        # dotnet test --filter "Category=Integration"
        docker compose -f "docker-compose.yml" down

    - name: Clean up secret files
      if: always()
      run: rm -f postgres_password.txt rabbit_password.txt minio_password.txt
      working-directory: ./secrets

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create password files
      run: |
        mkdir -p secrets
        echo "${{ secrets.POSTGRES_PASSWORD }}" > secrets/postgres_password.txt
        echo "${{ secrets.RABBIT_PASSWORD }}" > secrets/rabbit_password.txt
        echo "${{ secrets.MINIO_PASSWORD }}" > secrets/minio_password.txt

    - name: Deploy to production
      run: docker compose -f "docker-compose.yml" up -d

    - name: Clean up secret files
      if: always()
      run: rm -f postgres_password.txt rabbit_password.txt minio_password.txt
      working-directory: ./secrets

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy]
    if: always()
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build-and-test.result }}" = "success" ]; then
          echo "‚úÖ Build and tests passed"
        else
          echo "‚ùå Build or tests failed"
        fi
    
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "‚úÖ Deployment completed"
        elif [ "${{ needs.deploy.result }}" = "skipped" ]; then
          echo "‚è≠Ô∏è Deployment skipped (not main branch)"
        else
          echo "‚ùå Deployment failed"
        fi
